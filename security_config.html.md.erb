---
title: Providing a Certificate for your SSL Termination Point
owner: RelEng
---

<strong><%= modified_date %></strong>

This topic describes the procedure for providing [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF) Elastic Runtime 
with an SSL certificate, as part of the process of configuring Elastic Runtime for deployment. 
See the [Getting Started with Pivotal Cloud Foundry ](../installing/index.html) topic for help installing PCF on your IaaS of choice.

This topic provides two procedures. Choose the correct procedure for your environment type:

* For a production environment, follow [Configure for a Production Deployment](#prod).
* For a testing or development environment, follow [Configure for a Development or Testing Deployment](#dev). This procedure includes how to generate an RSA certificate suitable for a non-production environment.

<p class="note"><strong>Note</strong>: Certificates generated in Elastic Runtime are signed by the Ops Manager Certificate Authority. They are not technically self-signed, but they are sometimes referred to as "Self-Signed Certificates" in the Ops Manager UI and throughout this documentation.</p>

## <a id="prod"></a>Configure for a Production Deployment

1. Navigate to the Ops Manager Installation Dashboard.

1. Click the **Elastic Runtime** tile in the Installation Dashboard.

1. Click **Networking**.

    <%= image_tag 'ssl-termination.png' %>

1. If your deployment uses an external load balancer that can forward encrypted traffic to the router, do the following:

  1. Under **Configure the point-of-entry to this environment**, select the first option.
  2. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **SSL Termination Certificate and Private Key**.
  If your deployment is on AWS, this certificate must match the one that you uploaded to AWS earlier in the
  [Upload an SSL Certificate](../customizing/cloudform-template.html#upload-cert) section of the 
  [Deploying the CloudFormation Template for PCF on AWS](../customizing/cloudform-template.html) topic.
  3. Configure **Router SSL Ciphers**. Leave these fields blank unless you want to use a specific set of SSL ciphers for the Router. Enter a colon-separated list of custom SSL ciphers to pass to the router.
  4. Skip to [step 6](#save).

1. If you use HAProxy and not your own load balancer as the first point-of-entry, do the following:

  1. Under **Configure the point-of-entry to this environment**, select the third option.
  2. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **SSL Termination Certificate and Private Key**.
  If your deployment is on AWS, this certificate must match the one that you uploaded to AWS earlier in the
  [Upload an SSL Certificate](../customizing/cloudform-template.html#upload-cert) section of the 
  [Deploying the CloudFormation Template for PCF on AWS](../customizing/cloudform-template.html) topic.
  3. Configure **Router SSL Ciphers**. Leave these fields blank unless you want to use a specific set of SSL ciphers for the Router. Enter a colon-separated list of custom SSL ciphers to pass to the router.
  4. Select **Disable HTTP traffic to HAProxy** if you want HAProxy to only allow HTTPS traffic.

1. <a id="save"></a>Click **Save**.


## <a id="dev"></a>Configure for a Development or Testing Deployment

1. Navigate to the Ops Manager Installation Dashboard.

1. Click the **Elastic Runtime** tile in the Installation Dashboard.

1. Click **Networking**.

    <%= image_tag 'ssl-termination.png' %>

1. If your deployment uses an external load balancer that can forward encrypted traffic to the router, do the following:

  1. Under **Configure the point-of-entry to this environment**, select the first option.
  2. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **SSL Termination Certificate and Private Key**.
  If your deployment is on AWS, this certificate must match the one that you uploaded to AWS earlier in the
  [Upload an SSL Certificate](../customizing/cloudform-template.html#upload-cert) section of the 
  [Deploying the CloudFormation Template for PCF on AWS](../customizing/cloudform-template.html) topic.
  3. Click **Generate RSA Certificate** to populate the **Router SSL Termination Certificate and Private Key** fields with RSA certificate and private key information. Enter your system and app domains in wildcard format. Optionally, also add custom domains in wildcard format. 
You can generate a single certificate for two domains separated by a comma, such as `*.apps.YOUR-DOMAIN.com, *.system.YOUR-DOMAIN.com`. 
The example below uses `*.YOUR-DOMAIN.com`.
  <%= image_tag("generate-cert.png") %>
    <p class="note"><strong>Note</strong>: SSL certificates generated for wildcard DNS records only work for a single domain name component or component fragment. For example, a certificate generated with <code>\*.YOUR-DOMAIN.com</code> does not work for <code>apps.YOUR-DOMAIN.com</code> and <code>system.YOUR-DOMAIN.com</code>. The certificate must have both <code>apps.YOUR-DOMAIN.com</code> and <code>system.YOUR-DOMAIN.com</code> attributed to it. </p>
  4. Configure **Router SSL Ciphers**. Leave these fields blank unless you want to use a specific set of SSL ciphers for the Router. Enter a colon-separated list of custom SSL ciphers to pass to the router.
  5. Skip to [step 6](#save2).

1. If you use HAProxy and not your own load balancer as the first point-of-entry, do the following:

  1. Under **Configure the point-of-entry to this environment**, select the third option.
  2. Enter your PEM encoded certificate and your PEM encoded private key in the fields under **SSL Termination Certificate and Private Key**.
  If your deployment is on AWS, this certificate must match the one that you uploaded to AWS earlier in the
  [Upload an SSL Certificate](../customizing/cloudform-template.html#upload-cert) section of the 
  [Deploying the CloudFormation Template for PCF on AWS](../customizing/cloudform-template.html) topic.
  1. Configure **HAProxy SSL Ciphers**. Leave these fields blank unless you want to use a specific set of SSL ciphers for HAProxy. Enter a colon-separated list of custom SSL ciphers to pass to HAProxy.
  1. Select **Disable HTTP traffic to HAProxy** if you want HAProxy to only allow HTTPS traffic.

1. <a id="save2"></a>Click **Save**.

