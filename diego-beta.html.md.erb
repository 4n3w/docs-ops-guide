---
title: Diego Beta
---

Guide detailing how to install Diego and .Net beta releases. 

<p class="note"><strong>Important</strong>: Ensure you are using the Diego tile with the logo as per below for customer sites. Tile version p-diego.0.1.0.alpha.50.2ba668c.pivotal </p>

<%= image_tag("./diego-beta/image1.jpg") %>

## <a id='overview'></a> Overview ##

With these beta tiles, you can deploy Diego alongside the existing Elastic Runtime tile so that customers can try out the new Diego functionality.

Application developers can choose where to deploy their application to, either the existing runtime or Diego.

It will also allow customers to try out .Net and Docker support. 

## <a id='prerequisites'></a> Prerequisites ##

* OpsManager 1.4.2 or greater
* Elastic Runtime 1.5.0.alpha.735.6255c2d (Contains CF Release 207)
* Diego for PCF 0.1.0.alpha.50.2ba66c (diego-release: 0.1099.0 -       bbdd0d01a2bafb2f7772a0f088262858bccd4620)
* Diego Windows MSI f0e5ac0 

<p class="note"><strong>Note</strong>:You must use this exact combination of versions. These have being tested together and are correct and working as of Wednesday 6th May. </p>

All of the three components can be found on [PivNet](https://network.pivotal.io/products/pivotal-diego-pcf).

They are only available to members of these groups:
* Pivotal Field Engineering
* Pivotal internal early access
* Diego Beta

If you need adding to one of these groups please ask Ben Laplanche, Evan Wiley or Kimberly Johnson for access. 

You also need the [Diego CLI plugin](https://github.com/cloudfoundry-incubator/diego-cli-plugin) to push applications or Docker Images to Diego instead of the existing DEAs.

## <a id='important'></a> Important Notes ##

1. This is an beta release - intended for demonstration purposes for customers
1. You should use this in a fresh and separate environment
1. As a result - there are no guarantees on being able to upgrade from these alpha releases to subsequent GA releases
1. We do not recommend anyone starts running this in production as its not supported yet

## <a id='known-issues'></a> Important Caveats and Known Issues

* No support for Docker
* No upgrades are supported between any versions of the components

## <a id='installation'></a> Installation ##

All of this requires an OpsManager 1.4.2 either on vSphere or AWS.

<p class="note"><strong>Note</strong>: OpsManager 1.4.0 has a known issue that affects multi-availability zone installations on vSphere, and another issue with upgrades of product tiles on AWS. It is therefore recommended you install or upgrade to OpsManager 1.4.2, which has fixes for these issues. </p>

### Elastic Runtime ###

Download the version specified in the pre-requisites from Pivotal Network and upload to your OpsManager installation.

### Fresh Install ###

Alternatively, you can deploy a fresh Elastic Runtime tile. 

### Docker ###
To enable support for pushing docker, check the **Enable Diego Docker support** box on the Cloud Controller configuration page and deploy. 

<%= image_tag("./diego-beta/image2.png") %>

### Diego for PCF ###

Download the tile from PivNet, upload into OpsManager, and deploy the tile.

None of the defaults should need to be changed unless there is a specific need. The resourcing is sufficient for trying out Diego, but can be increased if you require. 

### .Net ###

Download the MSI from Pivotal Network to the Window cell VM, as detailed in the Pre-Requisites.

.Net is installed and managed outside of CloudFoundry and thus is not installed through OpsManager.

## <a id='step1'></a> Step 1: ##

Install a Windows Server 2012 R2 64bit VM on the same vSphere cluster.

For step by step instructions on how to do this on AWS, see the end of the guide.

## <a id='step2'></a> Step 2: ##

Disable the windows firewall.

This is to allow communication between the Consul agents on the Windows machine and in Cloud Foundry.

## <a id='step3'></a> Step 3: ##

Run the following configuration commands on the windows server: 
https://github.com/pivotal-cf/diego-windows-msi/blob/f0e5ac0f983a4caf265cd412130c26d01a555bab/scripts/setup.bat 

Or alternatively, paste the below into a file called setup.bat.

```
dism /online /Enable-Feature /FeatureName:IIS-WebServer /All /NoRestart
dism /online /Enable-Feature /FeatureName:IIS-WebSockets /All /NoRestart
dism /online /Enable-Feature /FeatureName:Application-Server-WebServer-Support /FeatureName:AS-NET-Framework /All /NoRestart
dism /online /Enable-Feature /FeatureName:IIS-HostableWebCore /All /NoRestart

netsh interface ipv4 add dnsserver "Ethernet" address=127.0.0.1 index=1
netsh interface ipv4 add dnsserver "Ethernet" address={DNS-SERVER-IP} index=2
netsh interface ipv4 show dnsservers

:: disable Dnscache setup [#91881972]
:: Dnscache will disable dns servers if they didn't respond/were down.
:: This combined with the fact that the Consul agent keeps dying is causing
:: name resolution to all cf components.
sc config Dnscache start= disabled
sc stop Dnscache
```
Replace {DNS-SERVER-IP} with your DNS IP address.

## <a id='step4'></a> Step 4: ##

Install the MSI by executing the below commands, in the terminal. This is a one line command. The ^ represents line returns, the equivalent of \ in bash.

### DiegoWindowsMSI_f0e5ac0.msi (0.1.0.alpha.47): ###

```
msiexec /norestart /i DiegoWindowsMSI.msi ^ CONTAINERIZER_USERNAME=[Username with admin privileges] ^ 
CONTAINERIZER_PASSWORD=[User password for the above account] ^
EXTERNAL_IP=[External IP of box] ^ 
CONSUL_IPS=[Comma-separated IP addresses of consul agents from Diego bosh deploy] ^ 
ETCD_CLUSTER=[URI to the Diego etcd cluster from cf bosh deploy] ^
CF_ETCD_CLUSTER=[URI to the Runtime cf etcd cluster from cf bosh deploy] ^ 
MACHINE_NAME=[This machine’s name (must be unique across your cluster)] ^
STACK=windows2012R2 ^ 
ZONE=[Bosh redundancy zone this cell is a part of] ^
LOGGREGATOR_SHARED_SECRET=[loggregator secret from your cf bosh deploy]
```

### All versions after DiegoWindowsMSI_f0e5ac0.msi (0.1.0.alpha.47): ###

```
msiexec /norestart /i DiegoWindowsMSI.msi ^ 
ADMIN_USERNAME=[Username with admin privileges] ^ 
ADMIN_PASSWORD=[User password for the above account] ^
EXTERNAL_IP=[External IP of box] ^ 
CONSUL_IPS=[Comma-separated IP addresses of consul agents from Diego bosh deploy] ^ 
ETCD_CLUSTER=[URI to the Diego etcd cluster from cf bosh deploy] ^
CF_ETCD_CLUSTER=[URI to the Runtime cf etcd cluster from cf bosh deploy] ^ 
MACHINE_NAME=[This machine’s name (must be unique across your cluster)] ^
STACK=windows2012R2 ^ 
REDUNDANCY_ZONE=[Bosh redundancy zone this cell is a part of] ^
LOGGREGATOR_SHARED_SECRET=[loggregator secret from your cf bosh deploy]
```
**CONTAINERIZER\_USERNAME / ADMIN_USERNAME**
Username with admin privileges on the windows machine where you are installing the MSI. The username may need to include .\ (e.g, .\Administrator), depending on how your Windows Server is configured.

**CONTAINERIZER\_PASSWORD / ADMIN_PASSWORD**
Password for the CONTAINERIZER\_USERNAME / ADMIN_USERNAME account.

**EXTERNAL_IP**
External IP of the windows machine where you are installing the MSI.

**ONSUL_IPS**
Go to the OpsManager -> Runtime tile -> Status -> consul job and copy the IP address(es).

**ETCD\_CLUSTER**
Go to the OpsManager -> Diego tile -> Status -> etcd job and copy the IP address(es). This must be the URI to the etcd cluster, not IP addresses. Use this command to ensure you can connect to the etcd server from Ops Manager:

```
curl http://<etcd-server-ip>:4001/v2/keys/message -XPUT -d value="Hello diego"
```

**CF\_ETCD_CLUSTER**
Go to the OpsManager -> Runtime tile -> Status -> etcd job and copy the IP address(es). This must be the URI to the cf etcd cluster, not IP addresses.

**MACHINE_NAME**
Hostname of the machine you are installing the windows MSI on. This should be unique across the cluster.

**STACK**
The name of the stack should always be `windows2012R2`.

**ZONE / REDUNDANCY_ZONE**
You can get the zone from the EC2 instances list, instance name, after the dash. The EC2 instance name with `nats-partition-abcde12345fedcb54321/0` would have a zone of `abcde12345fedcb54321`. This is not the AWS zone.

You can also navigate to OpsManager -> Runtime tile -> Assign Availability Zones. Click on the AZ listed under the heading “Balance other jobs in”. 

Right click and select “Inspect Element” (if using Chrome). Take the value highlighted in the red box: 

<%= image_tag("./diego-beta/image3.png") %>

**LOGGREGATOR_SHARED_SECRET**
The shared secret listed in your CF Runtime deployment / credentials tab, e.g.:

<%= image_tag("./diego-beta/image4.png") %>

### Example for DiegoWindowsMSI_f0e5ac0.msi (0.1.0.alpha.47): ###

```
msiexec /norestart /i DiegoWindowsMSI.msi ^ CONTAINERIZER_USERNAME=.\Administrator ^ CONTAINERIZER_PASSWORD=secretpassword ^
EXTERNAL_IP=10.10.5.4 ^ CONSUL_IPS=10.10.5.11,10.10.6.11,10.10.7.11 ^ ETCD_CLUSTER=http://10.10.5.10:4001 ^
CF_ETCD_CLUSTER=http://10.244.0.42:4001 ^ MACHINE_NAME=WIN-RD649GEUDP1 ^
STACK=windows2012R2 ^ 
ZONE=0c35dfe1cf34ec47e2a2 ^
LOGGREGATOR_SHARED_SECRET=loggregator-secret
```

### Example for all versions after DiegoWindowsMSI_f0e5ac0.msi (0.1.0.alpha.47): ###

```
msiexec /norestart /i DiegoWindowsMSI.msi ^ ADMIN_USERNAME=.\Administrator ^ 
ADMIN_PASSWORD=secretpassword ^
EXTERNAL_IP=10.10.5.4 ^ CONSUL_IPS=10.10.5.11,10.10.6.11,10.10.7.11 ^ ETCD_CLUSTER=http://10.10.5.10:4001 ^
CF_ETCD_CLUSTER=http://10.244.0.42:4001 ^ MACHINE_NAME=WIN-RD649GEUDP1 ^
STACK=windows2012R2 ^ 
REDUNDANCY_ZONE=0c35dfe1cf34ec47e2a2 ^
LOGGREGATOR_SHARED_SECRET=loggregator-secret
```

## <a id='step5'></a> Step 5: ##
If everything has deployed successfully, you will have these jobs running:

<%= image_tag("./diego-beta/image5.png") %>

## <a id='step6'></a> Step 6: ##
Try to push a .Net application

e.g. from https://github.com/pivotal-cf-experimental/nora/tree/master/assets/nora :

Execute the following wrapper script:

```
./make_a_nora
```

This will push the example “hello world” application.

The contents of the wrapper script are:

```
cf push $APPNAME -s windows2012R2 -b https://github.com/ryandotsmith/null-buildpack.git --no-start
cf set-env $APPNAME DIEGO_BETA true
cf set-env $APPNAME DIEGO_RUN_BETA true
cf enable-diego $APPNAME
cf start $APPNAME
```

You can confirm the stack by running `cf stacks`.

It won’t use the given buildpack, but it’s still necessary to specify one at this point (just use the null-buildpack).

The [null buildpack](https://www.google.com/url?q=https%3A%2F%2Fgithub.com%2Fryandotsmith%2Fnull-buildpack.git&sa=D&sntz=1&usg=AFQjCNEWVBNOP2qWlQL7xxyFgqQI2uW8VQ) is not available on PCF by default.

# <a id='aws-windows'></a> AWS Windows 2012 Server #

1. Open the AWS console, and click on EC2.

	<%= image_tag("./diego-beta/image6.png") %>

1. Step 2. Click on "Instances" in the EC2 home screen.

	<%= image_tag("./diego-beta/image7.png") %>

1. Click on "Launch Instance" in the Instances screen.

	<%= image_tag("./diego-beta/image8.png") %>

1. Select Microsoft Windows Server 2012 R2 Base.

	<%= image_tag("./diego-beta/image9.png") %>

1. Select an instance type.

	It's not especially important what size we choose. In this example, we will  	choose m3.xlarge. Then, click "next".

	<%= image_tag("./diego-beta/image10.png") %>

1. Select a network and subnet. The network should the same VPC we have our micro bosh deployed in.

	<%= image_tag("./diego-beta/image11.png") %>

	The subnet should be be the same mask as the ip address of the job running 	etcd. For example, if we run `bosh vms`, we get:

	```
 VMs total: 30
    Deployment `cf-greenhaus1-diego'
    
    Director task 975
    
    Task 975 done
    
    +--------------------+---------+---------------+------------+
    | Job/index          | State   | Resource Pool | IPs        |
    +--------------------+---------+---------------+------------+
    | brain_z1/0         | running | large_z1      | 10.10.5.72 |
    | cc_bridge_z1/0     | running | bridge_z1     | 10.10.5.76 |
    | cell_windows_z1/0  | running | large_z1      | 10.10.5.73 |
    | cell_z1/0          | running | large_z1      | 10.10.5.74 |
    | consul_z1/0        | running | medium_z1     | 10.10.5.11 |
    | etcd_z1/0          | running | medium_z1     | 10.10.5.10 |
    | route_emitter_z1/0 | running | small_z1      | 10.10.5.77 |
    +--------------------+---------+---------------+------------+
    
    VMs total: 7
	```

	The `etcd_z1/0` job has an ip address of 
	`10.10.5.10`, so our subnet should be `10.10.5.0/24`.

	Then, click "Configure Security Group".

1. Create a new security group that allows traffic from anywhere. This is not recommended for production deployments, but is sufficient for development purposes. Then, click "review and launch".

	<%= image_tag("./diego-beta/image12.png") %>

1. Click "Launch".

	<%= image_tag("./diego-beta/image13.png") %>

1. Key pairs: You can select your existing "bosh" key pair, check the check box to acknowledge you have the private key, and click "Launch Instances".

	<%= image_tag("./diego-beta/image14.png") %>

1. Launch your instance. It will take a minute or two for the instance to launch, but when it does you can right click it in your list of instances and select "Get Windows Password". You can either upload your private key file or copy its contents into the dialog.

	<%= image_tag("./diego-beta/image15.png") %>

	<%= image_tag("./diego-beta/image16.png") %>

	Copy this down somewhere.

1. Access Windows machine using SSH tunneling. To do so, we will need to get the public IP of your bosh director, which you can find by searching for an instance named "micro". 

	<%= image_tag("./diego-beta/image17.png") %>

	You will also need the private IP of your Windows instance:

	<%= image_tag("./diego-beta/image18.png") %>

1. SSH Tunnel: At the command line, enter:

	```
	ssh -L 3389:INSTANCE_PRIVATE_IP:3389 vcap@DIRECTOR_IP
	```

	For example:

	```
	ssh -L 3389:10.10.5.80:3389 vcap@52.20.21.23
	```

1. Open Microsoft Remote Desktop and create a new remote desktop with the same properties shown, with the password you retrieved earlier.

	<%= image_tag("./diego-beta/image19.png") %>

1. Double click the remote desktop you just created to connect to it. You may see a certificate warning which you can ignore by clicking "Continue".

	<%= image_tag("./diego-beta/image20.png") %>

	It may take a minute to connect the first time as Windows sets up your user 	account.

	Now return to the instructions, picking up from the step to install the MSI.