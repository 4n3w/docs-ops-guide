---
title: Deploying Diego for Windows
owner: Diego
---

<strong><%= modified_date %></strong>

This topic contains instructions for setting up a Windows cell in a Diego
deployment. For more information about Diego, see the [Diego Architecture](../concepts/diego/diego-architecture.html) topic.

A **cell** is a virtual machine (VM) that stages, hosts, and manages application lifecycles. You can install a Windows cell into your Pivotal Cloud Foundry (PCF) deployment by connecting directly to a Windows VM.

##<a id="limitations"></a>Limitations

###<a id="cf-features-not-supported"></a>Unsupported Features

Diego for Windows does not yet support the following features:

* Guaranteed binary compatibility with Diego BOSH releases
* BOSH rolling updates for PCF or core operating system updates in Windows
* Fair sharing of CPU resources 
  <p class="note"><strong>Note</strong>: Diego for Windows does not enforce any CPU limits.</p>
* Container SSH access from the Cloud Foundry Command Line Interface (cf CLI)
* ICMP egress by default. You must explicitly enable ICMP through security groups.
* Emitting firewall logs into the CF log pipeline

###<a id="stability-scalability"></a>Stability and Scalability Expectations

Capacity planning for Windows instances of PCF varies greatly based on the overhead caused by the components you add to the instance. 

###<a id="supported-applications"></a>Supported Applications

The following application types are known to run correctly on Diego Windows:

* [ASP.NET MVC](https://github.com/cloudfoundry-incubator/wats/tree/af669382b4639e7605afc23f1dc8d48d8bfa5dd1/assets/nora/NoraPublished)

	<p class="note"><strong>Note</strong>: Twelve-factor ASP.NET MVC apps compiled against .NET 3.5+ were tested most extensively.</p>

* [Windows-compiled executables](https://github.com/cloudfoundry-incubator/wats/tree/af669382b4639e7605afc23f1dc8d48d8bfa5dd1/assets/webapp)
* [Batch scripts with a manually specified start command](https://github.com/cloudfoundry-incubator/wats/tree/af669382b4639e7605afc23f1dc8d48d8bfa5dd1/assets/batch-script)
* [WCF Applications](https://github.com/cloudfoundry/wats/tree/3709b49c4f29152752201c03ba146ead34bd50ae/assets/wcf/Hello.Service.IIS)

##<a id="manual"></a>Install

###<a id="prereqs"></a>Prerequisites

* A working Diego deployment
* A Windows Server 2012R2 VM instance that is routable to your Diego deployment
    * See [recommended instance types](https://github.com/cloudfoundry-incubator/diego-release/tree/3b229e0b971402387bd7c1831e96b2a177cbfcae#recommended-instance-types) in the GitHub Diego release repo for details.
    * If you are creating a new Windows image, and not using one predefined and
supplied by your IaaS, we recommend using this [ISO image](https://msdn.microsoft.com/subscriptions/json/GetDownloadRequest?brand=MSDN&locale=en-us&fileId=62611&activexDisabled=true&akamaiDL=false) as a starting
point. You must have an MSDN account to download this ISO image.
	* We recommend at least 50 gigabytes of storage space for your Windows VM instance.

    <p class='note'><strong>Note</strong>: The IP address of your Windows cell must not conflict with the IP addresses of VMs managed by BOSH. To prevent a conflict, use separate subnets in your VPC for the Windows cell and BOSH VMs, or assign the Windows cell an IP address from the <a href="../customizing/vsphere-config.html#networks">Excluded IP Range</a> that you declared in Ops Manager.</p>

###<a id='setup-files'></a>Step 1: Retrieve Setup Files

Perform the following steps to download the necessary setup files:

1. From your Windows cell, navigate to the [Elastic Runtime product on Pivotal Network](https://network.pivotal.io/products/elastic-runtime).

1. Select the **DiegoWindows** file group from the table.

	![DiegoWindows file group](images/greenhouse/diego-windows-file-group.png)

1. Download the **setup.ps1** and **generate.exe** files. Keep this window open to complete the steps below.
  <p class='note'><strong>Note</strong>: If you download the generate.exe file using Internet Explorer, Internet Explorer removes the <code>.exe</code> extension. You must rename the file to add the <code>.exe</code> extension.</p>

###<a id='cell'></a>Step 2: Configure Windows Cell

Perform the following steps to configure your Windows cell:

1. Using **File Explorer**, navigate to the location where you downloaded the **setup.ps1** and **generate.exe** files.

1. Right-click on the **setup.ps1** file and select **Run with PowerShell**.
The **setup.ps1** script configures Windows features, DNS settings, and the firewall for your Windows cell.

   <p class='note'><strong>Note</strong>: Some IaaSes may require elevated Windows privileges to run the `setup.ps1` script. If you receive a <code>PSSecurity Unauthorized Access</code> error, use the `Set-ExecutionPolicy Unrestricted` PowerShell cmdlt before re-running the `setup.ps1` script.</p>

###<a id='download-manifest'></a>Step 3: Download Your Manifest

Perform the following steps to download your Cloud Foundry manifest:

1. SSH into your Ops Manager VM. The steps vary depending on your IaaS. For more information, see the [SSH into Ops Manager](../customizing/trouble-advanced.html#ssh) section of the _Advanced Troubleshooting with the BOSH CLI_ topic.

1. From your Ops Manager VM, use the BOSH CLI to target and log in to your BOSH Director. The steps vary depending on whether your PCF deployment uses internal authentication or an external user store. For more information, see the [Log into BOSH](../customizing/trouble-advanced.html#log-in) section of the _Advanced Troubleshooting with the BOSH CLI_ topic.

1. Use the `bosh deployments` command to list your deployments:
  <pre class="terminal">
  $ bosh deployments
  Acting as user 'director' on 'p-bosh'
  RSA 1024 bit CA certificates are loaded due to old openssl compatibility
  +-------------------------+-------------------------------+-----------------------------------------------+--------------+
  | Name                    | Release(s)                    | Stemcell(s)                                   | Cloud Config |
  +-------------------------+-------------------------------+-----------------------------------------------+--------------+
  | cf-222e11e11111111e1111 | cf-autoscaling/36             | bosh-google-kvm-ubuntu-trusty-go_agent/3263.7 | none         |
  |                         | cf-mysql/26.6                 |                                               |              |
  |                         | cf/239.0.26                   |                                               |              |
  |                         | cflinuxfs2-rootfs/1.33.0      |                                               |              |
  |                         | consul/108.0.2                |                                               |              |
  |                         | diego/0.1485.1                |                                               |              |
  |                         | etcd/60.0.1                   |                                               |              |
  |                         | garden-runc/0.9.2             |                                               |              |
  |                         | ipsec/1.5.37                  |                                               |              |
  |                         | mysql-backup/1.25.0           |                                               |              |
  |                         | mysql-monitoring/6            |                                               |              |
  |                         | notifications-ui/17           |                                               |              |
  |                         | notifications/24              |                                               |              |
  |                         | pivotal-account/1             |                                               |              |
  |                         | push-apps-manager-release/652 |                                               |              |
  |                         | routing/0.138.6               |                                               |              |
  |                         | service-backup/14             |                                               |              |
  +-------------------------+-------------------------------+-----------------------------------------------+--------------+
  </pre>

1. Review the output and identify the name of your Cloud Foundry deployment. In the above example, the name is `cf-222e11e11111111e1111`.

1. Use the `bosh download` command to download the manifest of your Cloud Foundry deployment as `cf.yml`:
  <pre class="terminal">
  $ bosh download manifest cf-222e11e11111111e1111 cf.yml
  Acting as user 'director' on deployment 'cf-222e11e11111111e1111' on 'p-bosh'
  RSA 1024 bit CA certificates are loaded due to old openssl compatibility
  Deployment manifest saved to 'cf.yml'
  </pre>

1. Copy the `cf.yml` file from the Ops Manager VM to your Windows cell in one of two ways:
  * From your Windows cell, use [WinSCP](https://winscp.net/eng/download.php) to copy the manifest from the Ops Manager VM.
  * From your local Mac or Linux machine, use `scp` to copy the manifest from the Ops Manager VM, then use a Remote Desktop Protocol (RDP) client like [Microsoft Remote Desktop](https://itunes.apple.com/us/app/microsoft-remote-desktop/id715768417?mt=12) to mount a directory containing the manifest on your local machine as a drive on the Windows cell. For more information, see the [Microsoft documentation](https://technet.microsoft.com/en-us/library/dn473012(v=ws.11).aspx). 

###<a id='script-generator'></a>Step 4: Run Install Script Generator

From your Windows cell, run **generate.exe** with the following arguments:

* **manifest**: The path to the manifest file downloaded from your Ops Manager BOSH Director
* **outputDir**: The directory that will contain the required certificates and a script to run the installers

<pre class="terminal">
$ generate.exe ^
-manifest /tmp/cf.yml ^
-outputDir C:\diego-windows
</pre>

<p class="note"><strong>Note</strong>: The parameters for <code>generate.exe</code> are case-sensitive.</p>

###<a id='msi'></a>Step 5: Install MSI

1. Download **DiegoWindows.msi** and **GardenWindows.msi** from the same Pivotal Network file group to the **outputDir** that you specified above.

	![DiegoWindows msis](images/greenhouse/diego-windows-msis.png)

	![downloading msis](images/greenhouse/downloading-msi-screen.png)

1. From a command prompt, run **install.bat** from the **outputDir**.

    <p class="note"><strong>Note</strong>: By default, Containerizer stores container files at <code>C:\containerizer</code>. To modify the default, open <code>install.bat</code> and set <code>CONTAINER_DIRECTORY</code> to the directory where you want Containerizer to store container files.</p>

	![running install bat](images/greenhouse/running-install-bat.png)

###<a id='confirm-deployment'></a>Step 6: Confirm Successful Deployment

Follow the steps below to deploy a sample .NET application to one of your Windows cells and exercise basic Elastic Runtime functionality to ensure that your deployment functions properly.

1. Launch **Task Manager**.

1. Navigate to the Services tab. Confirm that the following five services are running:
  * ConsulService
  * ContainerizerService
  * GardenWindowsService
  * MetronService
  * RepService
  ![running services](images/greenhouse/running-services.png)

1. Clone the [CF Smoke Tests](https://github.com/cloudfoundry/cf-smoke-tests.git) repository.

1. Follow the instructions from the CF Smoke Tests README to run the smoke tests against your environment with the `enable_windows_tests` configuration flag set to `true`.
