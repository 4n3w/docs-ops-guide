---
title: Deploying Diego for Windows
owner: Diego
---

<strong><%= modified_date %></strong>

This topic contains instructions for setting up a Windows cell in a Diego
deployment. For more information about Diego, see the [Diego Architecture](../concepts/diego/diego-architecture.html) topic.

A **cell** is a virtual machine (VM) that stages, hosts, and manages application lifecycles. You can install a Windows cell into your Cloud Foundry (CF) deployment by connecting directly to a Windows VM.

##<a id="limitations"></a>Limitations

###<a id="cf-features-not-supported"></a>Unsupported Features

Diego for Windows does not yet support the following features:

* Guaranteed binary compatibility with Diego BOSH releases
* BOSH rolling updates for CF or core operating system updates in Windows
* Fair sharing of CPU resources. Diego for Windows uses hard allocations instead.
* Container SSH access from the Cloud Foundry Command Line Interface (cf CLI)
* ICMP egress by default. You must explicitly enable ICMP through security groups.
* Emitting firewall logs into the CF log pipeline

###<a id="stability-scalability"></a>Stability and Scalability Expectations

Capacity planning for Windows instances of CF varies greatly based on the overhead caused by the components you add to the instance. 

###<a id="supported-applications"></a>Supported Applications

The following application types are known to run correctly on Diego Windows:

* [ASP.NET MVC](https://github.com/cloudfoundry-incubator/wats/tree/af669382b4639e7605afc23f1dc8d48d8bfa5dd1/assets/nora/NoraPublished)

	<p class="note"><strong>Note</strong>: Twelve-factor ASP.NET MVC apps compiled against .NET 3.5+ were tested most extensively.</p>

* [Windows-compiled executables](https://github.com/cloudfoundry-incubator/wats/tree/af669382b4639e7605afc23f1dc8d48d8bfa5dd1/assets/webapp)
* [Batch scripts with a manually specified start command](https://github.com/cloudfoundry-incubator/wats/tree/af669382b4639e7605afc23f1dc8d48d8bfa5dd1/assets/batch-script)
* [WCF Applications](https://github.com/cloudfoundry/wats/tree/3709b49c4f29152752201c03ba146ead34bd50ae/assets/wcf/Hello.Service.IIS)

##<a id="manual"></a>Install

###<a id="prereqs"></a>Prerequisites

* A working Diego deployment
* A Windows Server 2012R2 VM instance that is routable to your Diego deployment
    * See [recommended instance types](https://github.com/cloudfoundry-incubator/diego-release/tree/3b229e0b971402387bd7c1831e96b2a177cbfcae#recommended-instance-types) in the GitHub Diego release repo for details.
    * If you are creating a new Windows image, and not using one predefined and
supplied by your IaaS, we recommend using this [ISO image](https://msdn.microsoft.com/subscriptions/json/GetDownloadRequest?brand=MSDN&locale=en-us&fileId=62611&activexDisabled=true&akamaiDL=false) as a starting
point. You must have an MSDN account to download this ISO image.
	* We recommend at least 50 gigabytes of storage space for your Windows VM instance.

    <p class='note'><strong>Note</strong>: The IP address of your Windows cell must not conflict with the IP addresses of VMs managed by BOSH. To prevent a conflict, use separate subnets in your VPC for the Windows cell and BOSH VMs, or assign the Windows cell an IP address from the <a href="../customizing/vsphere-config.html#networks">Excluded IP Range</a> that you declared in Ops Manager.</p>

###<a id='setup-files'></a>Step 1: Retrieve Setup Files

Follow the instructions below to download and configure the Windows cell.

1. From your Windows cell, navigate to the [Elastic Runtime product on Pivotal Network](https://network.pivotal.io/products/elastic-runtime).

1. Select the **DiegoWindows** file group from the table.

	![DiegoWindows file group](images/greenhouse/diego-windows-file-group.png)

1. Download the **setup.ps1** and **generate.exe** files. Keep this window open to complete the steps below.
  <p class='note'><strong>Note</strong>: If you download the generate.exe file using Internet Explorer, Internet Explorer removes the <code>.exe</code> extension. You must rename the file to add the <code>.exe</code> extension.</p>

###<a id='cell'></a>Step 2: Configure Windows Cell

1. Using **File Explorer**, navigate to the location where you downloaded the **setup.ps1** and **generate.exe** files.

1. Right-click on the **setup.ps1** file and select **Run with PowerShell**.
The **setup.ps1** script configures Windows features, DNS settings, and the firewall for your Windows cell.

###<a id='script-generator'></a>Step 3: Run Install Script Generator

1. From a command prompt, run **generate.exe** with the following arguments:
    * **boshUrl**: Find your `boshUrl` in the [troubleshooting](http://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html) documentation.
    * **outputDir**: The directory that will contain the required certificates and a script to run the installers.

	<pre class="terminal">
	$ generate.exe ^
	-boshUrl https://username:password@bosh-director.example.com:25555 ^
	-outputDir C:\diego-windows
	</pre>

	<p class="note"><strong>Note</strong>: The parameters for <code>generate.exe</code> are case-sensitive.</p>

###<a id='msi'></a>Step 4: Install MSI

1. Download **DiegoWindows.msi** and **GardenWindows.msi** from the same Pivotal Network file group to the **outputDir** that you specified above.

	![DiegoWindows msis](images/greenhouse/diego-windows-msis.png)

	![downloading msis](images/greenhouse/downloading-msi-screen.png)

1. From a command prompt, run **install.bat** from the **outputDir**.

	![running install bat](images/greenhouse/running-install-bat.png)

###<a id='confirm-deployment'></a>Step 5: Confirm Successful Deployment

Follow the steps below to deploy a sample .NET application to one of your Windows cells and exercise basic Elastic Runtime functionality to ensure that your deployment functions properly.

1. Launch **Task Manager**.

1. Navigate to the Services tab. Confirm that the following five services are running:
  * ConsulService
  * ContainerizerService
  * GardenWindowsService
  * MetronService
  * RepService
  ![running services](images/greenhouse/running-services.png)

1. Clone the [CF Smoke Tests](https://github.com/cloudfoundry/cf-smoke-tests.git) repository.

1. Follow the instructions from the CF Smoke Tests README to run the smoke tests against your environment with the `enable_windows_tests` configuration flag set to `true`.
