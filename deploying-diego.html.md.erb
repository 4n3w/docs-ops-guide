---
title: Deploying Diego Beta
---

This topic contains instructions for setting up a Windows cell in a Diego deployment. See the [Diego Beta Overview](./diego-overview.html) topic for general information on Diego beta.

## <a id='prequisites'></a> Prerequisites

* A working Diego deployment. Refer to [Diego Beta Overview](./diego-overview.html) for instructions.
* A Windows cell

<p class='note'><strong>Note</strong>: We recommend that you used the following Windows ISO SHA1: <code>B6F063436056510357CB19CB77DB781ED9C11DF3</code>.</p>

## <a id='install-windows-server'></a> Step 1: Set Up the Windows Cell ##

Download the `setup.ps1` file from [Pivotal Network](https://network.pivotal.io/products/pivotal-diego-pcf). From your file explorer, right-click the `setup.ps1` file and click **Run with powershell**. The script configures the required Windows features, DNS settings, and your firewall for your Windows cell.

## <a id='msi'></a> Step 2: Install the MSI ##

Install the MSI by running a command that sets your environment variables. The command depends on the version of the MSI you are using.

<p class='note'><strong>Note</strong>: The following example assumes that the MSI was downloaded to <code>C:\diego.msi</code>.</p>

The following is an example command for `DiegoWindowsMSI_f0e5ac0.msi (0.1.0.alpha.47)`:

<pre class='terminal'>
msiexec /norestart /i c:\diego.msi ^
ADMIN_USERNAME=Administrator ^
ADMIN_PASSWORD=secretpassword ^
CONSUL_IPS=10.10.5.11,10.10.6.11,10.10.7.11 ^
ETCD_CLUSTER=http://10.10.5.10:4001 ^
CF_ETCD_CLUSTER=http://10.244.0.42:4001 ^
MACHINE_NAME=WIN-RD649GEUDP1 ^
STACK=windows2012R2 ^
REDUNDANCY_ZONE=0c35dfe1cf34ec47e2a2 ^
LOGGREGATOR_SHARED_SECRET=loggregator-secret
</pre>

## <a id='env-vars'></a>Environment Variables for Ops Manager Deployments

If you used Ops Manager to deploy Diego beta, complete the following steps to find the values that you need for the `misexec` command:

###<a id='opsman-consul-ips'></a>CONSUL_IPS

IP addresses of consul agents from your Diego BOSH deployment.

Navigate to your PCF Ops Manager dashboard, click the **Runtime** tile, and select **Status**. Locate your **consul** job and copy the comma-separated list of IP addresses.

###<a id='opsman-etcd-cluster'></a>ETCD_CLUSTER

URI for the Diego etcd cluster from your Cloud Foundry BOSH deployment.

Navigate to your PCF Ops Manager dashboard, click the **Diego** tile, and select **Status**. Locate your **etcd** job and copy the IP addresses. Run the following command to ensure you can connect to the etcd server from Ops Manager:

<pre class='terminal'>
curl http://<etcd-server-ip>:4001/v2/keys/message -XPUT -d value="Hello diego"
</pre>

###<a id='opsman-cf-etcd-cluster'></a>CF\_ETCD\_CLUSTER

URI for the Runtime cf etcd cluster from your Cloud Foundry BOSH deployment.

Navigate to your PCF Ops Manager dashboard, click the **Pivotal Elastic Runtime** tile, and select **Status**. Locate your **etcd** job and copy the IP address. Format the IP address as a URL with port 4001 as in the example URL http://10.10.5.10:4001.

###<a id='opsman-zone'></a>ZONE / REDUNDANCY_ZONE

The BOSH redundancy zone this cell is a part of.

Navigate to your PCF Ops Manager Dashboard, click the **Diego for PCF** tile, and select **Credentials**. Locate the username and password for **Receptor Credentials** and navigate to  `http://receptor.<YOUR-DOMAIN>/v1/cells`.

You should see `zone` listed inside each existing cell, as the example below shows:

```
[
   {
      "cell_id":"cell-partition-0880c1d1dca06bbf67e1-0",
      "zone":"0880c1d1dca06bbf67e1",
      "capacity":{
         "memory_mb":30679,
         "disk_mb":15993,
         "containers":256
      }
   }
]
```

If you are using AWS, you can get the zone by navigating to **EC2 Dashboard>Instances** on your AWS Console. Select the instance name. The zone is separated from the name by a dash in the format `<YOUR-INSTANCE-NAME>-<YOUR-ZONE>`.

For example, an EC2 instance name with `nats-partition-abcde12345fedcb54321/0` would have a zone of `abcde12345fedcb54321`.

###<a id='log-shared-secret'></a>LOGGREGATOR\_SHARED\_SECRET

The shared secret from your CF Runtime deployment.

Navigate to your PCF Ops Manager dashboard and select **Credentials**. Find the **Doppler Server** job. The **Shared Secret Credentials** information is formatted as `XXXXXXXXXX / <YOUR-SHARED-SECRET>`, as shown in the image below.

<%= image_tag("./diego/log-shared-secret.png") %>

## <a id='confirm-deployment'></a> Step 3: Confirm Successful Deployment##

After successful deployment, the following jobs are running:

  * Consul
  * Containerizer
  * Executor
  * GardenWindows
  * Rep

## <a id='push-dot-net-app'></a> Step 4: Push a .Net application ##

Clone the sample app Nora from [GitHub](https://github.com/pivotal-cf-experimental/nora/tree/master/assets/nora).

Run the following command:

<pre class='terminal'>
./make_a_nora
</pre>

This script executes the commands below to push, configure, and start your application.

<pre class='terminal'>
cf push $APPNAME -s windows2012R2 -b https://github.com/ryandotsmith/null-buildpack.git --no-start
cf set-env $APPNAME DIEGO_BETA true
cf set-env $APPNAME DIEGO_RUN_BETA true
cf enable-diego $APPNAME
cf start $APPNAME
</pre>

<p class='note'><strong>Note</strong>: <code>cf push</code> does not use the given buildpack. It is necessary to specify one at this point, so use the null-buildpack. The <a href='https://github.com/ryandotsmith/null-buildpack'>null buildpack</a> is not available on PCF by default.
</p>

Run `cf apps` to confirm that your app is in the `started` state.
